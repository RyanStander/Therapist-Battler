<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityConnector</name>
    </assembly>
    <members>
        <member name="T:UnityConnector.DataSender">
            Connector for the Unity InstantAvatar
        </member>
        <member name="M:UnityConnector.DataSender.#ctor">
            <summary>
            Create DataSender and connect to avator using default ports and ip
            </summary>
        </member>
        <member name="M:UnityConnector.DataSender.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create DataSender and connect to avator using give ports and ip
            </summary>
        </member>
        <member name="M:UnityConnector.DataSender.initConnections(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            init connection with instant avatar (default: localhost, 4242, 4244, 4243)<br/>
            
            </summary>
            <param name="ipAddr">server ip of avatar; default: localhost</param>
            <param name="segmentPort">segment server port of avatar; default: 4242</param>
            <param name="shadowPort">segment server port of shadow avatar; default: 4244</param>
            <param name="commandPort">command server port of avatar; default: 4243</param>
            <returns></returns>
        </member>
        <member name="M:UnityConnector.DataSender.reconnect">
            <summary>
            Request reconnection to the Unity InstantAvatar using last known (default) ip address and ports
            </summary>
        </member>
        <member name="M:UnityConnector.DataSender.sendCommand(System.String)">
            <summary>
            send command to avatar. Message options:<br/>
             <code>camera,position</code> where position one of {front, left, right, topLeft, topRight}<br/>
            <code>segments,segment1,segment2,...</code> where segments are elements of {Pelvis, LeftUpperLeg, LeftLowerLeg, LeftFoot,
            RightUpperLeg, RightLowerLeg, RightFoot}<br/>
            <code>switchScene</code> toggle between male and female avatar<br/>
            <code>shadow,on</code> and <code>shadow,off</code> show or hide shadow avatar
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:UnityConnector.DataSender.sendCommandWithReply(System.String)">
            <summary>
            request-reply command. Message options: <br/>
            <code>getCamPosition</code> -> response: current camera position
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:UnityConnector.DataSender.sendAvatarSegmentRotations(System.Single[])">
            <summary>
            send to the avatar new rotations (quaternions) to the initialized segments as list of floats;
            length of the array must be the
            4 * the number of initialized segments; expected quaternion order: (w, x, y, z) 
            </summary>
            <param name="segment_floats"></param>
            <returns></returns>
        </member>
        <member name="M:UnityConnector.DataSender.getAvatarSegmentRotations">
            <summary>
            Get the rotations (quaternions) of the avatar's segments <br/>
            returns quaternions as a list of floats; quaternion order: (w, x, y, z)
            </summary>
            <returns>quaternions as a list of floats; quaternion order: (w, x, y, z)</returns>
        </member>
        <member name="M:UnityConnector.DataSender.getInvertedAvatarSegmentRotations">
            <summary>
            Get the inverted rotations (quaternions) of the avatar's segments: <br/>
            inv = rotation * inv(initialRotation); result = (w, -x, -z, -y)
            </summary>
            <returns>quaternions as a list of floats; quaternion order: (w, x, y, z)</returns>
        </member>
        <member name="M:UnityConnector.DataSender.sendShadowAvatarSegmentRotations(System.Single[])">
            <summary>
            send to the shadow avatar new rotations (quaternions) to the initialized segments as list of floats;
            length of the array must be the
            4 * the number of initialized segments; expected quaternion order: (w, x, y, z) 
            </summary>
            <param name="segment_floats"></param>
            <returns></returns>
        </member>
        <member name="M:UnityConnector.DataSender.getShadowAvatarSegmentRotations">
            <summary>
            Get the rotations (quaternions) of the shadow avatar's segments<br/>
            returns quaternions as a list of floats; quaternion order: (w, x, y, z)
            </summary>
            <returns>quaternions as a list of floats; quaternion order: (w, x, y, z)</returns>
        </member>
        <member name="M:UnityConnector.DataSender.getInvertedShadowAvatarSegmentRotations">
            <summary>
            Get the inverted rotations (quaternions) of the shadow avatar's segments: <br/>
            inv = rotation * inv(initialRotation); result = (w, -x, -z, -y)
            </summary>
            <returns>quaternions as a list of floats; quaternion order: (w, x, y, z)</returns>
        </member>
    </members>
</doc>
